Parameters:
  Image:
    Type: String
    Description: Docker image to use for the ECS task

  SlackAccessToken:
    Type: String
    Description: Access token that Gatekeeper uses to post messages to slack

  SlackUserToken:
    Type: String
    Description: Token that gatekeeper uses to lookup users on slack

  SlackSigningSecret:
    Type: String
    Description: Token that Gatekeeper uses to verify slack payload signatures

  SlackApiUrl:
    Type: String
    Description: Url for the Slack API

  PiApiUrl:
    Type: String
    Description: Url for the API that the Raspberry PI uses
  
  DomainName:
    Type: String
    Description: Domain name to use for the gatekeeper API

  HostedZone:
    Type: String
    Description: Hosted zone to put dns records in

  ScaleDownOffHours:
    Type: String
    Description: >-
      Whether or not autoscaling should happen. If set to true, instances will
      be scaled to 0 off-hours.
  
Conditions:
  ScaleDownOffHours: !Equals
    - !Ref ScaleDownOffHours
    - 'true'
  
Resources:
  Certificate:
    Type: Custom::Certificate
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      ServiceToken: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:binxio-cfn-certificate-provider'

  IssuedCertificate:
    Type: Custom::IssuedCertificate
    Properties:
      CertificateArn: !Ref Certificate
      ServiceToken: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:binxio-cfn-certificate-provider'

  CertificateDNSRecord:
    Type: Custom::CertificateDNSRecord
    Properties:
      CertificateArn: !Ref Certificate
      DomainName: !Ref DomainName
      ServiceToken: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:binxio-cfn-certificate-provider'

  DomainValidationRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Ref HostedZone
      RecordSets:
        - Name: !GetAtt CertificateDNSRecord.Name
          Type: !GetAtt CertificateDNSRecord.Type
          TTL: 60
          Weight: 1
          SetIdentifier: !Ref Certificate
          ResourceRecords:
            - !GetAtt CertificateDNSRecord.Value
  
  ListenerCertificate:
    Type: AWS::ElasticLoadBalancingV2::ListenerCertificate
    DependsOn: IssuedCertificate
    Properties:
      ListenerArn: !ImportValue aws-combined-networking-HttpsListenerArn
      Certificates:
        - CertificateArn: !Ref Certificate

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: IssuedCertificate
    Properties:
      ListenerArn: !ImportValue aws-combined-networking-HttpsListenerArn
      Priority: 3
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ListenerTarget
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Ref DomainName

  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !ImportValue aws-combined-networking-ClusterName
      LaunchType: FARGATE
      TaskDefinition: !Ref TaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Split [",", !ImportValue BaseNetworking-SubnetIds]
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !ImportValue BaseNetworking-HttpSecurityGroupId
            - !GetAtt PiSecurityGroup.GroupId
      LoadBalancers:
        - ContainerName: primary
          ContainerPort: 80
          TargetGroupArn: !Ref ListenerTarget
      DesiredCount: 1
      DeploymentConfiguration:
        MinimumHealthyPercent: 1
        MaximumPercent: 200
  
  PiSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !ImportValue BaseNetworking-VpcId
      GroupDescription: Allows communication with the Gatekeeper Raspberry PI
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 71.39.228.233/32

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30

  ListenerTarget:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: ip
      VpcId: !ImportValue BaseNetworking-VpcId
      Protocol: HTTP
      Port: 80
      HealthCheckPath: /healthcheck
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      TargetGroupAttributes:
        - Key:  deregistration_delay.timeout_seconds
          Value:  30

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !GetAtt TaskRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: primary
          Essential: 'true'
          Image: !Ref Image
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: us-east-1
              awslogs-stream-prefix: !Ref AWS::StackName
          Environment:
            - Name: PORT
              Value: 80
            - Name: ENCRYPTED_SLACK_ACCESS_TOKEN
              Value: !Ref SlackAccessToken
            - Name: ENCRYPTED_SLACK_USER_TOKEN
              Value: !Ref SlackUserToken
            - Name: ENCRYPTED_SLACK_SIGNING_SECRET
              Value: !Ref SlackSigningSecret
            - Name: SLACK_API_URL
              Value: !Ref SlackApiUrl
            - Name: ENCRYPTED_PI_API_URL
              Value: !Ref PiApiUrl
  
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
                - application-autoscaling.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - !Sub arn:aws:iam::${AWS::AccountId}:policy/PipelineKeyDecrypt

  DNSEntry:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Ref HostedZone
      Comment: Gatekeeper
      RecordSets:
        - Name: !Ref DomainName
          Type: A
          AliasTarget:
            HostedZoneId: !ImportValue aws-combined-networking-LoadBalancerCanonicalHostedZoneId
            DNSName: !ImportValue aws-combined-networking-LoadBalancerDnsName
        - Name: !Ref DomainName
          Type: AAAA
          AliasTarget:
            HostedZoneId: !ImportValue aws-combined-networking-LoadBalancerCanonicalHostedZoneId
            DNSName: !ImportValue aws-combined-networking-LoadBalancerDnsName
  
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Condition: ScaleDownOffHours
    Properties:
      MaxCapacity: 1
      MinCapacity: 0
      ScheduledActions:
        - ScheduledActionName: Down
          StartTime: '2019-11-01T00:00:00Z'
          EndTime: '2999-11-01T00:00:00Z'
          ScalableTargetAction:
            MaxCapacity: 0
            MinCapacity: 0
          Schedule: cron(0 1 * * ? *)
      ResourceId: !Sub
        - service/${ClusterName}/${Service.Name}
        - ClusterName: !ImportValue aws-combined-networking-ClusterName
      RoleARN: !Sub >-
        arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      