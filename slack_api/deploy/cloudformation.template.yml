AWSTemplateFormatVersion: '2010-09-09'
Description: Gatekeeper Slack Api
Parameters:
  SlackAccessToken:
    Description: Access token for slack bot api
    Type: String
    Default: sai
  SlackUserToken:
    Description: Access token for slack user api
    Type: String
    NoEcho: true
  SlackSigningSecret:
    Description: Signing secret for slack
    Type: String
    NoEcho: true
  SlackApiUrl:
    Description: Slack API Url
    Type: String
    NoEcho: true
  PiApiUrl:
    Description: Raspberry Pi URL
    Type: String
    NoEcho: true
  Image:
    Description: The full name (with tag) of the image to pull from the registry
    Type: String
    AllowedPattern: ".+"
  HostedZone:
    Description: Name of the hosted zone to add a DNS entry to
    Type: String
    AllowedPattern: ".+"
  DNSName:
    Description: Full DNS name to expose this site under
    Type: String
    AllowedPattern: ".+"
  Version:
    Description: Version of the infrastructure build that deployed this stack. Used for tracking and to always force a change
    Type: String
    Default: Unknown
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Id of the VPC to deploy to
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of subnet Ids to run in
  ScaleDownOffHours:
    Type: String
    Description: Whether or not autoscaling should happen. If set to true, instances will be scaled to 0 off-hours.
  CatalinaOpts:
    Description: Options passed to the Catalina/Tomcat start process for the JVM
    Type: String
    Default: "-Xmx768m -XX:MaxPermSize=128m"
  HealthCheckEndpoint:
    Description: Endpoint to use for the Route 53 health check
    Type: String
  HealthCheckProtocol:
    Description: Protocol to use for the Route 53 health check
    Type: String
Conditions:
  ScaleDownOffHours:
    Fn::Equals:
    - !Ref ScaleDownOffHours
    - 'true'
  HasHealthCheck:
    Fn::And:
    - Fn::Not:
      - Fn::Equals:
        - !Ref HealthCheckEndpoint
        - ''
    - Fn::Not:
      - Fn::Equals:
        - !Ref HealthCheckProtocol
        - ''
Resources:
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: 256
      Memory: 1024
      ExecutionRoleArn: !ImportValue ECSDefaultCluster-ClusterInstanceRole
      TaskRoleArn: !ImportValue ECSDefaultCluster-ClusterInstanceRole
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      ContainerDefinitions:
      - Name: resume-presenter
        Essential: 'true'
        Image: !Ref Image
        PortMappings:
        - ContainerPort: 8080
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref LogGroup
            awslogs-region: us-east-1
            awslogs-stream-prefix: resume-presenter
        Environment:
        - Name: SLACK_ACCESS_TOKEN
          Value: !Ref SlackAccessToken
        - Name: SLACK_USER_TOKEN
          Value: !Ref SlackUserToken
        - Name: SLACK_SIGNING_SECRET
          Value: !Ref SlackSigningSecret
        - Name: SLACK_API_URL
          Value: !Ref SlackApiUrl
        - Name: PI_API_URL
          Value: !Ref PiApiUrl
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
  Service:
    Type: AWS::ECS::Service
    DependsOn: LBListener
    Metadata:
      Version:
        !Ref Version
    Properties:
      Cluster: !ImportValue ECSDefaultCluster-ClusterName
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref SubnetIds
          AssignPublicIp: ENABLED
      DesiredCount: '1'
      LoadBalancers:
      - ContainerName: resume-presenter
        ContainerPort: 8080
        TargetGroupArn: !Ref TargetGroup
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: '100'
        MaximumPercent: '200'
  ServiceScaleTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Condition: ScaleDownOffHours
    Properties:
      MaxCapacity: 1
      MinCapacity: 0
      ScheduledActions:
      - ScheduledActionName: Down
        StartTime: '2018-01-03T00:00:00Z'
        EndTime: '2999-01-03T00:00:00Z'
        ScalableTargetAction:
          MaxCapacity: 0
          MinCapacity: 0
        Schedule: cron(0 1 * * ? *)
      ResourceId: !Sub 
        - service/${ClusterName}/${Service.Name}
        - ClusterName: !ImportValue ECSDefaultCluster-ClusterName
      RoleARN:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  Certificate:
    Type: Custom::Certificate
    Properties:
      DomainName: !Ref DNSName
      ValidationMethod: DNS
      ServiceToken: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:binxio-cfn-certificate-provider'
  IssuedCertificate:
    Type: Custom::IssuedCertificate
    Properties:
      CertificateArn: !Ref Certificate
      ServiceToken: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:binxio-cfn-certificate-provider'
  CertificateDNSRecord:
    Type: Custom::CertificateDNSRecord
    Properties:
      CertificateArn: !Ref Certificate
      DomainName: !Ref DNSName
      ServiceToken: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:binxio-cfn-certificate-provider'
  DomainValidationRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Ref HostedZone
      RecordSets:
        - Name: !GetAtt CertificateDNSRecord.Name
          Type: !GetAtt CertificateDNSRecord.Type
          TTL: 60
          Weight: 1
          SetIdentifier: !Ref Certificate
          ResourceRecords:
            - !GetAtt CertificateDNSRecord.Value
  LoadBalancerV2:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: !Ref SubnetIds
      SecurityGroups: 
      - !ImportValue BaseNetworking-PublicSecurityGroupId
  LBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: IssuedCertificate
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancerV2
      Port: 443
      Protocol: HTTPS
      Certificates:
      - CertificateArn: !Ref Certificate
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: IssuedCertificate
    Properties:
      DefaultActions:
      - Type: redirect
        RedirectConfig:
          Protocol: HTTPS
          Port: 443
          Host: "#{host}"
          Path: "/#{path}"
          Query: "#{query}"
          StatusCode: HTTP_301
      LoadBalancerArn:
        !Ref LoadBalancerV2
      Port: 80
      Protocol: HTTP
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
    - LoadBalancerV2
    Properties:
      TargetType: ip
      VpcId: !Ref VpcId
      Protocol: HTTP
      Port: 80
      HealthCheckPath: "/health"
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 60
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 30
  DNSEntry:
    Type: AWS::Route53::RecordSetGroup
    DependsOn:
    - Service
    Properties:
      HostedZoneName:
        !Ref HostedZone
      Comment: Resume Presenter WWW alias
      RecordSets:
      - Name: !Ref DNSName
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt LoadBalancerV2.CanonicalHostedZoneID
          DNSName: !GetAtt LoadBalancerV2.DNSName
  DNSHealthCheck:
    Type: AWS::Route53::HealthCheck
    Properties:
      HealthCheckConfig:
        EnableSNI: true
        FailureThreshold: 3
        FullyQualifiedDomainName: !Ref DNSName
        Inverted: false
        Port: 443
        RequestInterval: 30
        ResourcePath: "/health"
        Type: HTTPS
  HealthCheckTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Resume Presenter Health Check Topic
  HealthCheckSubscription:
    Type: AWS::SNS::Subscription
    Condition: HasHealthCheck
    Properties:
      TopicArn: !Ref HealthCheckTopic
      Endpoint: !Ref HealthCheckEndpoint
      Protocol: !Ref HealthCheckProtocol
  HealthCheckAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm if ResumePresenter application is down.
      AlarmActions:
      - !Ref HealthCheckTopic
      ComparisonOperator: LessThanThreshold
      Threshold: 1
      Namespace: AWS/Route53
      MetricName: HealthCheckStatus
      Dimensions:
      - Name: HealthCheckId
        Value: !Ref DNSHealthCheck
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 1
Outputs:
  DatabaseURL:
    Description: DNS name for the database
    Value: !GetAtt Database.Endpoint.Address
  LoadBalancerUrl:
    Description: DNS name for this load balancer
    Value: !GetAtt LoadBalancerV2.DNSName